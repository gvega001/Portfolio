@page "/weather"
@using System.Text.Json

<PageTitle>Weather Banner</PageTitle>

<h1>Weather Banner</h1>

<p>@statusMessage</p>

@if (openMeteoData != null)
{
    <h2>Open-Meteo Data</h2>
    <p>Latitude: @openMeteoData.latitude</p>
    <p>Longitude: @openMeteoData.longitude</p>
    <p>Timezone: @openMeteoData.timezone</p>
    <h3>Hourly Data</h3>
    <ul>
        @for (int i = 0; i < openMeteoData.hourly?.time?.Length; i++)
        {
            <li>@openMeteoData.hourly.time[i]: @openMeteoData.hourly.temperature_2m[i] @openMeteoData.hourly_units?.temperature_2m</li>
        }
    </ul>
}

@if (nwsData != null)
{
    <h2>NWS Data</h2>
    <ul>
        @foreach (var period in nwsData.properties?.periods)
        {
            <li>@period.startTime: @period.temperature°F - @period.shortForecast</li>
        }
    </ul>
}

@code {
    private string statusMessage = "Loading weather data...";
    private OpenMeteoResponse? openMeteoData;
    private NWSResponse? nwsData;

    protected override async Task OnInitializedAsync()
    {
        // Call our static helper methods to fetch and save API data.
        await WeatherHelper.SaveWeatherDataAsync();
        statusMessage = "Weather data files created successfully!";

        // Load the data from the saved files.
        openMeteoData = await WeatherHelper.LoadOpenMeteoDataAsync();
        nwsData = await WeatherHelper.LoadNWSDataAsync();
    }

    // A static helper class that handles calling the APIs and saving the data to files.
    public static class WeatherHelper
    {
        // Create a static HttpClient instance.
        private static readonly HttpClient _httpClient = new HttpClient();

        // Define file paths using a folder from the system (adjust as needed).
        private static readonly string openMeteoFilePath =
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "openMeteoData.json");

        private static readonly string nwsFilePath =
            Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.ApplicationData), "nwsData.json");

        public static async Task SaveWeatherDataAsync()
        {
            await SaveOpenMeteoDataAsync();
            await SaveNWSDataAsync();
        }

        public static async Task SaveOpenMeteoDataAsync()
        {
            try
            {
                // Open-Meteo API URL with required parameters for Eastvale, California.
                var openMeteoUrl = "https://api.open-meteo.com/v1/forecast?latitude=33.9634&longitude=-117.5642&hourly=temperature_2m&timezone=America/Los_Angeles";
                var openMeteoDto = await _httpClient.GetFromJsonAsync<OpenMeteoResponse>(openMeteoUrl);
                if (openMeteoDto != null)
                {
                    var jsonData = JsonSerializer.Serialize(openMeteoDto, new JsonSerializerOptions { WriteIndented = true });
                    EnsureDirectoryExists(openMeteoFilePath);
                    await File.WriteAllTextAsync(openMeteoFilePath, jsonData);
                    Console.WriteLine($"Open-Meteo data saved to: {openMeteoFilePath}");
                }
                else
                {
                    Console.WriteLine("Open-Meteo response was null.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving Open-Meteo data: {ex.Message}");
            }
        }


        public static async Task SaveNWSDataAsync()
        {
            try
            {
                // For demonstration, we use a sample NWS forecast URL.
                var nwsUrl = "https://api.weather.gov/gridpoints/TOP/31,80/forecast";
                // Note: The NWS API requires a User-Agent header. If needed, add it to _httpClient.
                if (!_httpClient.DefaultRequestHeaders.UserAgent.Any())
                {
                    _httpClient.DefaultRequestHeaders.UserAgent.ParseAdd("PortfolioWeatherApp/1.0 (contact@portfolio.com)");
                }
                var nwsDto = await _httpClient.GetFromJsonAsync<NWSResponse>(nwsUrl);
                if (nwsDto != null)
                {
                    var jsonData = JsonSerializer.Serialize(nwsDto, new JsonSerializerOptions { WriteIndented = true });
                    EnsureDirectoryExists(nwsFilePath);
                    await File.WriteAllTextAsync(nwsFilePath, jsonData);
                    Console.WriteLine($"NWS data saved to: {nwsFilePath}");
                }
                else
                {
                    Console.WriteLine("NWS response was null.");
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error saving NWS data: {ex.Message}");
            }
        }

        // Helper method to ensure the directory for a given file path exists.
        private static void EnsureDirectoryExists(string filePath)
        {
            var directory = Path.GetDirectoryName(filePath);
            if (!string.IsNullOrEmpty(directory) && !Directory.Exists(directory))
            {
                Directory.CreateDirectory(directory);
            }
        }

        public static async Task<OpenMeteoResponse?> LoadOpenMeteoDataAsync()
        {
            if (File.Exists(openMeteoFilePath))
            {
                var jsonData = await File.ReadAllTextAsync(openMeteoFilePath);
                return JsonSerializer.Deserialize<OpenMeteoResponse>(jsonData);
            }
            return null;
        }

        public static async Task<NWSResponse?> LoadNWSDataAsync()
        {
            if (File.Exists(nwsFilePath))
            {
                var jsonData = await File.ReadAllTextAsync(nwsFilePath);
                return JsonSerializer.Deserialize<NWSResponse>(jsonData);
            }
            return null;
        }
    }

    // DTO classes for Open-Meteo and NWS API responses.
    public class OpenMeteoResponse
    {
        public double? latitude { get; set; }
        public double? longitude { get; set; }
        public string? timezone { get; set; }
        public HourlyData? hourly { get; set; }
        public HourlyUnits? hourly_units { get; set; }
    }

    public class HourlyData
    {
        public string[]? time { get; set; }
        public double[]? temperature_2m { get; set; }
    }

    public class HourlyUnits
    {
        public string? time { get; set; }
        public string? temperature_2m { get; set; }
    }

    public class NWSResponse
    {
        public NWSProperties? properties { get; set; }
    }

    public class NWSProperties
    {
        public NWSPeriod[]? periods { get; set; }
    }

    public class NWSPeriod
    {
        public DateTime? startTime { get; set; }
        public int? temperature { get; set; }
        public string? shortForecast { get; set; }
    }
}

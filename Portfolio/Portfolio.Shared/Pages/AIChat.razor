@page "/aichat"
@using System.Net.Http.Json
@using System.Text.Json.Serialization
@inject IJSRuntime JS

<PageTitle>AI Chat</PageTitle>

<!-- Font Awesome -->
<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" />

<!-- Custom Styles for Enhanced Look -->
<style>
    /* Hero Section Enhancements */
    .hero-section {
        background: linear-gradient(135deg, #6366F1, #A78BFA);
        color: #fff;
        text-shadow: 1px 1px 2px rgba(0,0,0,0.3);
    }

        .hero-section h1 {
            animation: fadeInDown 1s ease-out;
        }

        .hero-section p {
            animation: fadeInUp 1s ease-out;
        }

    @@keyframes fadeInDown {
        from {
            opacity: 0;
            transform: translateY(-20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    @@keyframes fadeInUp {
        from {
            opacity: 0;
            transform: translateY(20px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }
    /* Card Enhancements */
    .card {
        transition: transform 0.3s ease-in-out, box-shadow 0.3s ease;
    }

        .card:hover {
            box-shadow: 0 0 20px rgba(0,0,0,0.15);
        }
    /* Button Enhancements */
    .btn {
        transition: background-color 0.3s ease, transform 0.2s ease;
    }

        .btn:hover {
            transform: translateY(-2px);
        }
</style>

<!-- Hero Section -->
<div class="hero-section d-flex align-items-center mb-5" style="min-height: 40vh;">
    <div class="container text-white text-center">
        <h1 class="display-3 fw-bold">
            <i class="fas fa-robot"></i> AI Chat
        </h1>
        <p class="lead mt-3">
            Interact with my custom GPT-based chatbot—enter a prompt and see the AI respond!
        </p>
    </div>
</div>

<div class="container mb-5">
    <div class="row justify-content-center">
        <div class="col-md-8">
            <!-- Card for Prompt Input -->
            <div class="card border border-2 border-secondary mb-4"
                 style="transition: transform 0.3s ease-in-out;"
                 onmouseover="this.style.transform='scale(1.02)';"
                 onmouseout="this.style.transform='scale(1)';">
                <div class="card-body">
                    <h4 class="card-title fw-bold">
                        <i class="fas fa-paper-plane"></i> Ask the AI
                    </h4>
                    <p class="card-text">
                        Type your question or command below, then click Send.
                    </p>

                    <!-- AI Service Selection -->
                    <div class="mb-3">
                        <label for="aiServiceSelect" class="form-label">
                            <i class="fas fa-sliders-h"></i> Select AI Service
                        </label>
                        <select id="aiServiceSelect" class="form-select" @bind="SelectedService">
                            <option value="puter">PuterAI</option>
                            <option value="openai">OpenAI</option>
                        </select>
                    </div>

                    <div class="mb-3">
                        <label for="userPrompt" class="form-label">
                            <i class="fas fa-keyboard"></i> Your Question
                        </label>
                        <textarea id="userPrompt" class="form-control" @bind="UserPrompt" rows="3"
                                  placeholder="Type your question here..."
                                  style="border: 1px solid #ced4da; border-radius: 4px; padding: 0.75rem; transition: border-color 0.3s ease;"
                                  onfocus="this.style.borderColor='#6366F1';"
                                  onblur="this.style.borderColor='#ced4da';"></textarea>
                    </div>
                    <button class="btn btn-primary" @onclick="SendChat"
                            style="transition: background-color 0.3s ease;"
                            onmouseover="this.style.backgroundColor='#4a5fc3';"
                            onmouseout="this.style.backgroundColor='#0d6efd';">
                        <i class="fas fa-paper-plane"></i> Send
                    </button>
                </div>
            </div>

            <!-- Card for AI Response -->
            @if (!string.IsNullOrEmpty(AIResponse))
            {
                <div class="card border border-2 border-secondary"
                     style="transition: transform 0.3s ease-in-out;"
                     onmouseover="this.style.transform='scale(1.02)';"
                     onmouseout="this.style.transform='scale(1)';">
                    <div class="card-body">
                        <h4 class="card-title fw-bold">
                            <i class="fas fa-robot"></i> AI says:
                        </h4>
                        <p style="font-family: 'Courier New', monospace; background-color: #f8f9fa; padding: 1rem; border-radius: 4px;">
                            @AIResponse
                        </p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string UserPrompt = string.Empty;
    private string SelectedService = "puter";
    private string? AIResponse;

    private async Task SendChat()
    {
        if (string.IsNullOrWhiteSpace(UserPrompt))
        {
            AIResponse = "Please enter a prompt.";
            return;
        }

        AIResponse = "Processing...";

        if (SelectedService == "puter")
        {
            // Use Puter.js via JS Interop
            try
            {
                AIResponse = await JS.InvokeAsync<string>("puterInterop.sendChatMessage", UserPrompt);
            }
            catch (JSException jsEx)
            {
                AIResponse = $"JavaScript error: {jsEx.Message}";
            }
            catch (Exception ex)
            {
                AIResponse = $"An unexpected error occurred: {ex.Message}";
            }
        }
        else if (SelectedService == "openai")
        {
            // Use OpenAI via API
            try
            {
                var url = $"{BaseUrl}/api/ai/chat?prompt={Uri.EscapeDataString(UserPrompt)}";
                using var client = new HttpClient();
                var result = await client.GetFromJsonAsync<AIResponseWrapper>(url);
                // Extract only the message content
                AIResponse = result?.Message?.Content ?? "No response from AI.";
            }
            catch (Exception ex)
            {
                AIResponse = $"Error: {ex.Message}";
            }
        }
        else
        {
            AIResponse = "Invalid AI service selected.";
        }
    }

    private const string BaseUrl = "https://localhost:7041";

    // Model to match the API's JSON response
    private class AIResponseWrapper
    {
        [JsonPropertyName("index")]
        public int Index { get; set; }

        [JsonPropertyName("message")]
        public AIMessage Message { get; set; }
    }

    private class AIMessage
    {
        [JsonPropertyName("role")]
        public string Role { get; set; }

        [JsonPropertyName("content")]
        public string Content { get; set; }

        [JsonPropertyName("refusal")]
        public string? Refusal { get; set; }
    }
}
<!-- Include the Puter.js library -->
<script src="https://js.puter.com/v2/"></script>

<!-- JavaScript interop code -->
<script>
    window.puterInterop = {
        sendChatMessage: async function (prompt) {
            try {
                const response = await puter.ai.chat(prompt);
                // Extract only the content from the nested message object if available
                if (response && response.message && response.message.content) {
                    return response.message.content;
                }
                return typeof response === 'string' ? response : JSON.stringify(response);
            } catch (error) {
                console.error(error);
                return "An error occurred while processing your request.";
            }
        },
        generateImage: async function (description) {
            try {
                const imageElement = await puter.ai.txt2img(description);
                return imageElement.src;
            } catch (error) {
                console.error(error);
                return null;
            }
        }
    };
</script>
